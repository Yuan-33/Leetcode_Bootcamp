1.
class Solution(object):
    def numBusesToDestination(self, routes, source, target):
        if source == target:
            return 0

        max_stop = max(max(route) for route in routes)
        if max_stop < target:
            return -1

        n = len(routes)
        min_buses_to_reach = [float('inf')] * (max_stop + 1)
        min_buses_to_reach[source] = 0

        flag = True
        while flag:
            flag = False
            for route in routes:
                mini = float('inf')
                for stop in route:
                    mini = min(mini, min_buses_to_reach[stop])
                mini += 1
                for stop in route:
                    if min_buses_to_reach[stop] > mini:
                        min_buses_to_reach[stop] = mini
                        flag = True

        return min_buses_to_reach[target] if min_buses_to_reach[target] < float('inf') else -1


2.
class Solution:
    def decodeString(self, s: str) -> str:
        
        stack = []
        for char in s:
            stack.append(char)
            if char == "]":
                repeat = ""
                letter = []
                stack.pop(-1)
                while stack[-1] != "[":
                    letter.append( stack[-1] )
                    stack.pop(-1)
                letter = letter[::-1]
                letter_str = "".join(letter)
                
                stack.pop(-1)
                numb = ""
                while not stack[-1].isalpha() and stack[-1] != "[":
                    numb += stack[-1]
                    stack.pop(-1)

                    if len(stack) == 0:
                        break
                numb = numb[::-1]

                for i in range(int(numb)):
                    repeat += letter_str

                stack.append(repeat)

        return "".join(stack)


3.
class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:

        dp, ct = [0] * n, 0
        dp[0] = 1

        for i in range(1, n):

            dp[i] = ct + dp[i-delay] - dp[i-forget]
            ct = dp[i]

        return sum(dp[n-forget:]) % 1000000007